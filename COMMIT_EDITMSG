Last login: Fri Oct 14 11:53:33 on ttys002
/usr/local/microsoft/powershell/7/pwsh ; exit;                                  
Cesar@MacBook-Pro-de-Cesar ~ % /usr/local/microsoft/powershell/7/pwsh ; exit;
PowerShell 7.2.6
Copyright (c) Microsoft Corporation.

https://aka.ms/powershell
Type 'help' to get help.

PS /Users/Cesar> mkdir pasta_exemplo
PS /Users/Cesar> cd. \pasta_exemplo
cd.: The term 'cd.' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS /Users/Cesar> cd .\pasta_exemplo\
PS /Users/Cesar/pasta_exemplo> echo "ola" > aquivo.txt
PS /Users/Cesar/pasta_exemplo> ls
aquivo.txt
PS /Users/Cesar/pasta_exemplo> cat aquivo.txt
ola
PS /Users/Cesar/pasta_exemplo> 

                               rm -r .\arquivo.txt\
rm: .\arquivo.txt\: No such file or directory
PS /Users/Cesar/pasta_exemplo> ls
aquivo.txt
PS /Users/Cesar/pasta_exemplo> rm -r .\arquivo.txt
rm: .\arquivo.txt: No such file or directory
PS /Users/Cesar/pasta_exemplo> rm -r aquivo.txt
PS /Users/Cesar/pasta_exemplo> ls
PS /Users/Cesar/pasta_exemplo> cd ..
PS /Users/Cesar> rm -r pasta_exemplo
PS /Users/Cesar> ls
AndroidStudioProjects	Documents		Movies
Applications		Downloads		Music
Creative Cloud Files	Dropbox			Pictures
Desktop			Library			Public
PS /Users/Cesar> git confg -- global user.name "Cesar Silveira"
git: 'confg' is not a git command. See 'git --help'.

The most similar command is
	config
PS /Users/Cesar> git config -- global user.name "Cesar Silveira"
fatal: not in a git directory
PS /Users/Cesar> git
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
PS /Users/Cesar> git config --global user.name "Cesar Silveira"
PS /Users/Cesar> git config --global user.email "csr.silveira@gmail.com"                 
PS /Users/Cesar> cd c:/
Set-Location: Cannot find drive. A drive with the name 'c' does not exist.
PS /Users/Cesar> cd git
Set-Location: Cannot find path '/Users/Cesar/git' because it does not exist.
PS /Users/Cesar> cd git/
Set-Location: Cannot find path '/Users/Cesar/git/' because it does not exist.
PS /Users/Cesar> cd  
PS /Users/Cesar> cd \Users\Cesar\Git\
Set-Location: Cannot find path '/Users/Cesar/Git/' because it does not exist.
PS /Users/Cesar> cd .\Documentos\Git
Set-Location: Cannot find path '/Users/Cesar/Documentos/Git' because it does not exist.
PS /Users/Cesar> cd ./Documentos/Git/
Set-Location: Cannot find path '/Users/Cesar/Documentos/Git/' because it does not exist.
PS /Users/Cesar> cd .\Documentos\Git\
Set-Location: Cannot find path '/Users/Cesar/Documentos/Git/' because it does not exist.
PS /Users/Cesar> cd \Documentos\Git\ 
Set-Location: Cannot find path '/Documentos/Git/' because it does not exist.
PS /Users/Cesar> mkdir Git          
PS /Users/Cesar> ls
AndroidStudioProjects	Downloads		Music
Applications		Dropbox			Pictures
Creative Cloud Files	Git			Public
Desktop			Library
Documents		Movies
PS /Users/Cesar> cls

PS /Users/Cesar> cd git
PS /Users/Cesar/Git> git init .
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in /Users/Cesar/Git/.git/
PS /Users/Cesar/Git> echo "ola mundo" > arquivo.txt
PS /Users/Cesar/Git> git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	arquivo.txt

nothing added to commit but untracked files present (use "git add" to track)
PS /Users/Cesar/Git> git add .\arquivo.txt
fatal: pathspec '.\arquivo.txt' did not match any files
PS /Users/Cesar/Git> git add .\arquivo.txt
fatal: pathspec '.\arquivo.txt' did not match any files
PS /Users/Cesar/Git> git add arquivo.txt
PS /Users/Cesar/Git> git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   arquivo.txt

PS /Users/Cesar/Git> echo "ola mundo 2" > arquivo2.txt
PS /Users/Cesar/Git> ls
arquivo.txt	arquivo2.txt
PS /Users/Cesar/Git> git add arquivo2.txt
PS /Users/Cesar/Git> ls
arquivo.txt	arquivo2.txt
PS /Users/Cesar/Git> git rm --cashed arquivo.txt
error: unknown option `cashed'
usage: git rm [<options>] [--] <file>...

    -n, --dry-run         dry run
    -q, --quiet           do not list removed files
    --cached              only remove from the index
    -f, --force           override the up-to-date check
    -r                    allow recursive removal
    --ignore-unmatch      exit with a zero status even if nothing matched
    --sparse              allow updating entries outside of the sparse-checkout cone
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character

PS /Users/Cesar/Git> git rm --cached arquivo.txt 
rm 'arquivo.txt'
PS /Users/Cesar/Git> git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   arquivo2.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	arquivo.txt

PS /Users/Cesar/Git> git add .
PS /Users/Cesar/Git> git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   arquivo.txt
	new file:   arquivo2.txt

PS /Users/Cesar/Git> git commit
hint: Waiting for your editor to close the file... 
inclusao de novos arquivos

inclusao dos arquivos: arquivo.txt e arquivo2.txt
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
#
# Initial commit
#
# Changes to be committed:
#       new file:   arquivo.txt
#       new file:   arquivo2.txt
#
~                                                                                                               
~                                                                                                               
~                                                                                                               
                                                                                                              
~                                                                                                                                                                                                                          
~                                                                                                               
~                                                                                                               
~                                                                                                               
~                                                                                                               
~                                                                                                               
~                                                                                                               
~                                                                                                    git

